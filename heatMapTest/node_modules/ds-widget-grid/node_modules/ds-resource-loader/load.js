
var util = require('util'),
    events = require("events");

var Load = module.exports = function (resource, context) {

    events.EventEmitter.call(this);

    this.resource = resource;
    this.context = context;

    this.on('error', function (err) {
        console.log('error occurred while loading resource, err: %s', err);
    })
};

util.inherits(Load, events.EventEmitter);

// load
(function () {

    this.load = function () {

        throw "Not Implemented";
    }
}).call(Load.prototype);

// promise
(function () {

    this.progress = function (callback) {

        this.on("progress", callback);
        return this;
    };

    this.then = this.done = function (callback) {

        this.on("done", callback);
        return this;
    };

    this.catch = this.fail = function (callback) {

        this.on("error", callback);
        return this;
    };
}).call(Load.prototype);