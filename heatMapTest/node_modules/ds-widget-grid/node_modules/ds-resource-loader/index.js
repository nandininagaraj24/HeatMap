
var Loader = function () {

    this.types = {};
}

Loader.prototype.get = function (resource, context) {

    if (typeof resource !== "object" || !resource.type) {
        var Type = this.types['noop'];
        var inst = new Type(resource, context);
        return inst;
    }

    if (this.types[resource.type]) {
        var Type = this.types[resource.type];
        var inst = new Type(resource, context);
        return inst;
    }

    return undefined;
}

Loader.prototype.load = function (resource, params, callback) {

    var context = this;
    var type = this.get(resource, context);

    if (!type) return callback("cannot load resource");

    type
        .load()
        .done(function (resp) {
            callback(null, resp);
        })
        .fail(function (err) {
            callback(err);
        });
}

Loader.prototype.add = function (load, type) {

    this.types[type] = load;
}

var loader = new Loader();

loader.add(require("./type/noop"), "noop");
loader.add(require("./type/http"), "http");
loader.add(require("./type/json"), "json");
loader.add(require("./type/instance"), "instance");
loader.add(require("./type/file"), "file");

module.exports = loader;
