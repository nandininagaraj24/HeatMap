
var util = require('util'),
    BaseLoad = require("../load");

var Load = module.exports = function (resource, context) {

    BaseLoad.call(this, resource, context);
};

util.inherits(Load, BaseLoad);

// load
(function () {

    this.load = function () {

        if (!this.context)
            return this.emit("error", "context cannot be found");

        var context = this.context;

        try {

            var val = eval('context.' + resource.target);
            var type = typeof val;

            switch (type) {

                case "function":

                    var that = this;

                    func.call(context, this.resource.params || {}, function () {

                        var data = err = null;

                        if (arguments.length === 1)
                            data = arguments[0];
                        else if (arguments.length === 2) {
                            err = arguments[0];
                            data = arguments[1];
                        }

                        if (err)
                            return that.emit('error', err);

                        that.emit('done', data);
                    });

                    return;
            }

            this.emit("done", val);

        } catch (e) {

            this.emit("error", e);
        }
    }
}).call(Load.prototype);