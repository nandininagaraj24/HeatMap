
var FS = require('fs'),
    PATH = require('path');

var Block = module.exports = function (name, params, manifest) {

    this.name = name;

    if (manifest)
        this.manifest = manifest;

    if (params)
        this.params = params;
};

// container
(function () {

    this.container = function (res, e, context, callback) {

        var ctr = this.manifest.containerTemplate || "template/ctr.htm";

        if (typeof ctr === 'string') {

            var s = ctr.split('.');

            switch (s[s.length - 1]) {

                case 'htm':
                case 'html':
                case 'xml':
                    return {
                        target: ctr,
                        type: 'file'
                    };
                default:
                    return ctr;
            }
        }
        else
            return ctr;
    };
}).call(Block.prototype);

(function () {

    // raw manifest
    this.getManifestJSON = function () {

        return require(PATH.join(this.folder(), 'manifest'));
    };

    this.setManifest = function (manifest) {

        this.manifest = manifest;
    };

    this.getManifest = function () {

        return this.manifest;
    };
}).call(Block.prototype);

// res
(function () {

    this.resources = function (type, root, res, e, context, callback) {

        type = type || { js: true, css: true, less: true };

        var folder = this.folder();

        var that = this, resources = {
            js: [],
            css: [],
            less: []
        };

        if (!FS.existsSync(PATH.join(folder, 'dist')))
            return callback(null, resources);

        FS.readdir(PATH.join(folder, 'dist'), function (err, files) {

            if (err) return callback(err);

            for (var i = 0; i < files.length; i++) {

                var stats = FS.lstatSync(PATH.join(folder, 'dist/' + files[i]));
                if (!stats.isFile()) continue;

                var s = files[i].split('.');
                var ext = s[s.length - 1];

                switch (ext) {

                    case 'js':
                        if (!type.js)
                            continue;
                        resources.js.push('/' + PATH.join(root, 'dist/' + files[i]));
                        break;
                    case 'css':
                        if (!type.css)
                            continue;
                        resources.css.push('/' + PATH.join(root, 'dist/' + files[i]));
                        break;
                    case 'less':
                        if (!type.less)
                            continue;
                        resources.less.push('/' + PATH.join(root, 'dist/' + files[i]));
                        break;
                }
            }

            return callback(null, resources);
        });
    };
}).call(Block.prototype);


// info
(function () {

    this.name = function (res, e, context, callback) {

        return this.name;
    };

    this.title = function (res, e, context, callback) {

        return this.manifest.title || this.name;
    };

    this.folder = function () {

        throw 'Not Implemented';
    }
}).call(Block.prototype);